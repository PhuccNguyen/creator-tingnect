'use client';

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronDown, 
  HelpCircle, 
  MessageCircle, 
  Mail,
  Gift,
  Percent,
  Users,
  Smartphone,
  CreditCard,
  Infinity,
  ExternalLink
} from 'lucide-react';
import styles from './FAQ.module.css';

const FAQ: React.FC = () => {
  const [activeIndex, setActiveIndex] = useState<number | null>(0);

  const handleContactClick = () => {
    window.open('https://forms.gle/H3k58Cj1k7YWpSum9', '_blank');
  };

  const faqs = [
    {
      icon: Gift,
      emoji: 'üéÅ',
      question: 'G√≥i 39.5 Tri·ªáu c√≥ th·ª±c s·ª± mi·ªÖn ph√≠ kh√¥ng?',
      answer: 'C√≥! B·∫°n nh·∫≠n MI·ªÑN PH√ç: Th∆∞·ªüng 50K ti·ªÅn m·∫∑t + G√≥i Vote 200K + H·ªó tr·ª£ Truy·ªÅn th√¥ng 5.95M. Ri√™ng G√≥i Tool AI (33.28M) b·∫°n ch·ªâ tr·∫£ ph√≠ k√≠ch ho·∫°t 689K thay v√¨ gi√° g·ªëc 33.97M - ti·∫øt ki·ªám 98%!',
      color: '#F59E0B'
    },
    {
      icon: CreditCard,
      emoji: 'üí∞',
      question: 'Khi n√†o t√¥i nh·∫≠n ƒë∆∞·ª£c 50.000ƒë ti·ªÅn th∆∞·ªüng?',
      answer: 'Ngay sau khi ho√†n t·∫•t 4 b∆∞·ªõc: (1) ƒêƒÉng k√Ω qua form, (2) Ho√†n thi·ªán h·ªì s∆°, (3) Follow c√°c k√™nh TingVote, (4) Tham gia group Creator Lab. Sau ƒë√≥ li√™n h·ªá fanpage TingVote ƒë·ªÉ x√°c nh·∫≠n v√† nh·∫≠n th∆∞·ªüng v√†o v√≠.',
      color: '#10B981'
    },
    {
      icon: Percent,
      emoji: 'ÔøΩ',
      question: 'C∆° ch·∫ø chia th∆∞·ªüng 20% ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
      answer: 'M·ªói l∆∞·ª£t vote tr·∫£ ph√≠ c·ªßa fan cho b·∫°n, TingVote t·ª± ƒë·ªông t√≠nh v√† chuy·ªÉn 20% doanh thu v√†o v√≠ Creator c·ªßa b·∫°n. Minh b·∫°ch, t·ª± ƒë·ªông, kh√¥ng gi·ªõi h·∫°n s·ªë l·∫ßn nh·∫≠n th∆∞·ªüng!',
      color: '#E7C873'
    },
    {
      icon: Users,
      emoji: 'üë•',
      question: 'T√¥i ch∆∞a c√≥ follower, c√≥ ƒë∆∞·ª£c tham gia kh√¥ng?',
      answer: 'T·∫•t nhi√™n! Creator Lab d√†nh cho M·ªåI NG∆Ø·ªúI - t·ª´ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu ƒë·∫øn Creator chuy√™n nghi·ªáp. Ch√∫ng t√¥i c√≥ mentor, c·ªông ƒë·ªìng v√† c√¥ng c·ª• h·ªó tr·ª£ b·∫°n ph√°t tri·ªÉn t·ª´ con s·ªë 0.',
      color: '#3B82F6'
    },
    {
      icon: Smartphone,
      emoji: 'üé¨',
      question: 'T√¥i c·∫ßn t·∫°o n·ªôi dung g√¨ ƒë·ªÉ nh·∫≠n vote?',
      answer: 'B·∫•t k·ª≥ n·ªôi dung n√†o b·∫°n ƒëam m√™: video TikTok/Reels, b√†i vi·∫øt Facebook, livestream, vlog YouTube... Ch·ªâ c·∫ßn gi·ªõi thi·ªáu b·∫£n th√¢n, k√™u g·ªçi vote v√† g·∫Øn link b√¨nh ch·ªçn c·ªßa b·∫°n!',
      color: '#8B5CF6'
    },
    {
      icon: Infinity,
      emoji: 'üöÄ',
      question: 'C√≥ gi·ªõi h·∫°n thu nh·∫≠p t·ª´ vote kh√¥ng?',
      answer: 'KH√îNG! B·∫°n nh·∫≠n 20% KH√îNG GI·ªöI H·∫†N t·ª´ m·ªói l∆∞·ª£t vote tr·∫£ ph√≠. C√†ng nhi·ªÅu fan ·ªßng h·ªô, c√†ng nhi·ªÅu thu nh·∫≠p. Top Creator c√≥ th·ªÉ ki·∫øm h√†ng ch·ª•c tri·ªáu m·ªói th√°ng!',
      color: '#DC2626'
    },
    {
      icon: CreditCard,
      emoji: 'üí≥',
      question: 'L√†m sao ƒë·ªÉ r√∫t ti·ªÅn th∆∞·ªüng?',
      answer: 'Ti·ªÅn th∆∞·ªüng t·ª± ƒë·ªông v√†o V√≠ Creator TingVote. B·∫°n c√≥ th·ªÉ r√∫t v·ªÅ t√†i kho·∫£n ng√¢n h√†ng khi ƒë·∫°t ng∆∞·ª°ng t·ªëi thi·ªÉu (th∆∞·ªùng 100K-500K) theo chu k·ª≥ ƒë·ªãnh k·ª≥ h√†ng tu·∫ßn/th√°ng.',
      color: '#059669'
    },
    {
      icon: MessageCircle,
      emoji: 'üì±',
      question: 'T√¥i c·∫ßn h·ªó tr·ª£ th√¨ li√™n h·ªá ai?',
      answer: 'Fanpage TingVote h·ªó tr·ª£ 24/7! Ngo√†i ra, b·∫°n c√≤n c√≥ c·ªông ƒë·ªìng Creator Lab tr√™n Facebook v·ªõi h√†ng trƒÉm Creator v√† Mentor s·∫µn s√†ng gi√∫p ƒë·ª°, chia s·∫ª kinh nghi·ªám.',
      color: '#2AF4FF'
    }
  ];

  const toggleFAQ = (index: number) => {
    setActiveIndex(activeIndex === index ? null : index);
  };

  return (
    <section className={styles.faq}>
      <div className={styles.container}>
        {/* Header */}
        <motion.div 
          className={styles.header}
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
        >
          <motion.div 
            className={styles.badge}
            initial={{ opacity: 0, scale: 0.8 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            viewport={{ once: true }}
          >
            <HelpCircle size={16} />
            <span>FAQ</span>
          </motion.div>

          <motion.h2 
            className={styles.title}
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.3 }}
            viewport={{ once: true }}
          >
            Gi·∫£i ƒë√°p{' '}
            <span className={styles.highlight}>m·ªçi th·∫Øc m·∫Øc</span>
          </motion.h2>

          <motion.p 
            className={styles.description}
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            viewport={{ once: true }}
          >
            Nh·ªØng c√¢u h·ªèi quan tr·ªçng v·ªÅ <span className={styles.highlight}>G√≥i 39 Tri·ªáu</span> v√† c√°ch ki·∫øm thu nh·∫≠p
          </motion.p>
        </motion.div>

        {/* FAQ List */}
        <div className={styles.faqList}>
          {faqs.map((faq, index) => {
            const Icon = faq.icon;
            return (
              <motion.div
                key={index}
                className={`${styles.faqItem} ${activeIndex === index ? styles.active : ''}`}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.5 + (index * 0.1) }}
                viewport={{ once: true }}
                whileHover={{ y: -2 }}
                onClick={() => toggleFAQ(index)}
              >
                <div className={styles.faqQuestion}>
                  <div className={styles.questionLeft}>
                    <div 
                      className={styles.questionIcon}
                      style={{ backgroundColor: `${faq.color}15` }}
                    >
                      <Icon size={16} style={{ color: faq.color }} />
                      <span className={styles.questionEmoji}>{faq.emoji}</span>
                    </div>
                    <h3 className={styles.questionText}>{faq.question}</h3>
                  </div>
                  
                  <ChevronDown 
                    className={`${styles.chevronIcon} ${activeIndex === index ? styles.rotate : ''}`}
                    size={20}
                  />
                </div>
                
                <AnimatePresence>
                  {activeIndex === index && (
                    <motion.div
                      className={styles.faqAnswer}
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <p>{faq.answer}</p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            );
          })}
        </div>

        {/* Contact Section */}
        <motion.div 
          className={styles.contactSection}
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          viewport={{ once: true }}
        >
          <div className={styles.contactCard}>
            <div className={styles.contactIconCircle}>
              <MessageCircle size={36} />
            </div>
            
            <h3 className={styles.contactTitle}>
              C√≤n c√¢u h·ªèi n√†o kh√°c? <span className={styles.contactHighlight}>H·ªèi ngay!</span>
            </h3>
            
            <p className={styles.contactText}>
              ƒê·ªôi ng≈© TingVote v√† c·ªông ƒë·ªìng Creator Lab lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7
            </p>

            <div className={styles.contactActions}>
              <motion.button
                className={styles.contactButton}
                onClick={handleContactClick}
                whileHover={{ scale: 1.05, y: -3 }}
                whileTap={{ scale: 0.95 }}
              >
                <Gift size={24} />
                <div className={styles.contactButtonContent}>
                  <span className={styles.contactButtonMain}>ƒêƒÇNG K√ù NGAY</span>
                  <span className={styles.contactButtonSub}>Nh·∫≠n G√≥i 39 Tri·ªáu & H·ªèi Tr·ª±c Ti·∫øp</span>
                </div>
                <ExternalLink size={20} />
              </motion.button>

              <div className={styles.contactInfo}>
                <Mail size={16} />
                <span>Ho·∫∑c email: contact@tingvote.com</span>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default FAQ;